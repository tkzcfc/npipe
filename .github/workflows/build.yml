name: build

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

  workflow_dispatch:

# env:
#   CARGO_TERM_COLOR: always

jobs:
  build:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: false

          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            use-cross: true
            
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
            use-cross: true
            
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
            use-cross: true
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use-cross: true

          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   use-cross: false
          
          # - os: windows-latest
          #   target: x86_64-pc-windows-gnu
          #   use-cross: false
          
          # - os: ubuntu-latest
          #   target: arm-unknown-linux-gnueabihf
          #   use-cross: true

          # - os: ubuntu-latest
          #   target: armv7-unknown-linux-gnueabihf
          #   use-cross: true

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false

          - os: windows-latest
            target: x86_64-win7-windows-msvc
            use-cross: false
            
          - os: windows-latest
            target: i686-pc-windows-msvc
            use-cross: true

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use-cross: true
          
          - os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false

          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set the version
      shell: bash
      if: env.BIN_VERSION == ''
      run: |
        echo "BIN_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        # 带v的版本号
        # echo "BIN_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
        echo "version is: ${{ env.BIN_VERSION }}"

    - name: Install dependencies
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: | 
        sudo apt update && sudo apt install musl-tools -y
        sudo apt-get update
        sudo apt-get install -y build-essential cmake clang pkg-config libclang-dev

    # - name: Install Rust
    #   if: matrix.target == 'x86_64-win7-windows-msvc'
    #   shell: bash
    #   run: |
    #     clang-cl --version
    #     lld-link --version
    #     rustup install nightly
    #     rustup toolchain install nightly
    #     rustup component add rust-src --toolchain nightly-x86_64-pc-windows-msvc
    #     cargo install xwin
    #     echo yes | xwin splat --output winsdk
    #     set RUSTFLAGS=-C linker=%CD%\xwin-lld-link && set CC=%CD%\xwin-clang-cl

  # nightly-2023-12-28 = nightly1.75.0
    - name: Install Rust
      if: matrix.target == 'x86_64-win7-windows-msvc'
      shell: bash
      run: |
        rustup install nightly
        rustup toolchain install nightly
        rustup component add rust-src --toolchain nightly-x86_64-pc-windows-msvc
        curl -L https://crates.io/api/v1/crates/windows_x86_64_msvc/0.48.5/download -o windows_x86_64_msvc-0.48.5.tar.gz
        7z x windows_x86_64_msvc-0.48.5.tar.gz
        7z x windows_x86_64_msvc-0.48.5.crate
        cp windows_x86_64_msvc-0.48.5/lib/windows.0.48.5.lib windows.0.48.5.lib

    - name: Install Rust
      if: matrix.target != 'x86_64-win7-windows-msvc'
      uses: dtolnay/rust-toolchain@stable
      with:
        # stable: 使用稳定版本的Rust。
        # beta: 使用测试版本的Rust。
        # nightly: 使用最新的夜间版本的Rust。
        # 具体版本号: 如1.56.0，指定特定的Rust版本。
        toolchain: 1.84.1
        target: ${{ matrix.target }}

    # - name: Add target
    #   run: rustup target add ${{ matrix.target }}
      
    - name: Setup native compilation
      if: ${{ matrix.use-cross == false }}
      shell: bash
      run: |
        if [ "${{ matrix.target }}" = "x86_64-win7-windows-msvc" ]; then
          echo "CARGO=cargo +nightly" >> $GITHUB_ENV
          echo "CARGO_BUILD_ARG=--release -Zbuild-std=std,panic_abort" >> $GITHUB_ENV
        else
          echo "CARGO=cargo" >> $GITHUB_ENV
          echo "CARGO_BUILD_ARG=--release" >> $GITHUB_ENV
        fi

    - name: Install cross
      if: matrix.use-cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Overwrite build command env variable
      if: matrix.use-cross
      shell: bash
      run: |
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    # https://aws.github.io/aws-lc-rs/requirements/linux.html
    # fix error: failed to run custom build command for `aws-lc-sys v0.30.0`
    - name: Install bindgen-cli
      # if: matrix.use-cross
      shell: bash
      run: |
        cargo install --force --locked bindgen-cli

    - name: Build
      shell: bash
      run: |
        $CARGO build --bin np_client $CARGO_BUILD_ARG --locked --target ${{ matrix.target }}
        $CARGO build --bin np_server $CARGO_BUILD_ARG --locked --target ${{ matrix.target }}

    # - name: Build
    #   id: build
    #   env:
    #     CC: musl-gcc
    #     RUSTFLAGS: "-C target-feature=+crt-static -C relocation-model=static"
    #     CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc
    #   run: |
    #     cargo build --bin np_client --release --target ${{ matrix.target }}
    #     cargo build --bin np_server --release --target ${{ matrix.target }}
      
    - name: Setup archive
      shell: bash
      run: |
        staging="np-v${{ env.BIN_VERSION }}-${{ matrix.target }}"
        mkdir -p "$staging"

        git clone https://github.com/tkzcfc/npipe-webui.git
        mkdir -p "$staging/dist"
        cp -R npipe-webui/dist/* "$staging/dist"

        # cd "$staging"
        # curl -LO "https://github.com/tkzcfc/npipe_web/releases/download/v1.0.0/dist.zip"
        # unzip dist.zip
        # rm ./dist.zip
        # cd ../

        cp config_template.json "$staging/config.json"
        cp generate-certificate.sh "$staging/generate-certificate.sh"

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/${{ matrix.target }}/release/np_client.exe" "$staging/"
          cp "target/${{ matrix.target }}/release/np_server.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/np_client" "$staging/"
          cp "target/${{ matrix.target }}/release/np_server" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload binaries to release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{ env.ASSET }}
